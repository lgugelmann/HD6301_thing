#!/usr/bin/env python3

"""Generates to stdout an assembly file to build all .s files in the programs/
directory. It optionally takes an explicit list of program names to include in
the output.

The assumptions are that each $(program).s file contains a public label called
$(program)_start that is the entry point for the program.

Example usage to generate programs.s from all programs in the programs/ directory:
  ./generate_programs_list.py > programs.s

Example usage to generate programs.s from just the snake and test programs in
the programs/ directory:
  ./generate_programs_list.py snake.s test.s > programs.s
"""

import os
import argparse

FILE_HEADER = """; AUTOGENERATED FILE, DO NOT EDIT
        cpu 6301

        org $8000

; Program registry structure:
; - autorun address (run this on reset, 0 starts the monitor instead)
; - for each program:
;   - 2 bytes pointing at the next entry
;   - zero-terminated string with program name
;   - 2 bytes address for its entry point
; - after that a last entry with just a $0000 where the next entry address
;   would go

; Set to 0 to start in the monitor, otherwise runs this program at startup.
program_registry_autorun:"""

def generate_programs_s(programs, autostart_program=""):
    "Prints an assembly file to stdout that includes all the given programs."
    print(FILE_HEADER)
    if autostart_program:
        print(f"        adr {autostart_program[:-2]}_start")
    else:
        print("        adr $0000")
    print("program_registry:")
    for program in programs:
        assert program.endswith(".s")
        basename = program[:-2]
        print("        adr +")
        print(f'        byt "{basename}\\0"')
        print(f"        adr {basename}_start")
        print("+")
    print("        adr $0000               ; End marker")
    print()
    for program in programs:
        print(f"        include programs/{program}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=
                                     "Generate an assembly file to build all .s "
                                     "files in the programs/ directory.")
    parser.add_argument("programs", nargs="*",
                        help="List of program names to include in the output.")
    parser.add_argument("--autostart_program", default="", help="Program to autostart on reset.")
    args = parser.parse_args()

    program_list = []
    if len(args.programs) == 0:
      # Make sure we can find the right programs directory regardless of where
      # the script is run.
        script_dir = os.path.dirname(os.path.abspath(__file__))
        programs_dir = os.path.join(script_dir, "programs")
        for filename in os.listdir(programs_dir):
            if filename.endswith(".s"):
                program_list.append(filename)
    else:
        program_list = args.programs

    generate_programs_s(sorted(program_list), autostart_program=args.autostart_program)
